mdl 1.3;

import ::math::*;
import ::state::*;
import ::tex::*;
import ::anno::*;
using .::OmniUe4Function import *;
using .::OmniUe4Translucent import *;

export annotation sampler_color();
export annotation sampler_normal();
export annotation sampler_grayscale();
export annotation sampler_alpha();
export annotation sampler_masks();
export annotation sampler_distancefield();
export annotation dither_masked_off();
export annotation world_space_normal();

export material M_PharmacyWindow(
	float HueShiftPercentage_S_ = 0.0,
	float B = 1.0,
	float Fraction = 0.9,
	float B_1 = 1.0)
 = 
	let {
	float3 WorldPositionOffset_mdl = float3(0.0,0.0,0.0);
	float2 CustomizedUV0_mdl = float2(state::texture_coordinate(0).x,1.0-state::texture_coordinate(0).y);

	float4 Local0 = ::unpack_normal_map(tex::lookup_float4(texture_2d("./Textures/Pharmacy_Low_Tex_PharmacyWindow_Normal.png",::tex::gamma_linear),float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat));

	float3 Normal_mdl = float3(Local0.x,Local0.y,Local0.z);

	float Local1 = (HueShiftPercentage_S_ * 6.283185);
	float Local2 = math::dot(float3(1.0,1.0,1.0), float3(1.0,1.0,1.0));
	float Local3 = math::sqrt(Local2);
	float3 Local4 = (float3(1.0,1.0,1.0) / Local3);
	float4 Local5 = tex::lookup_float4(texture_2d("./Textures/Pharmacy_Low_Tex_PharmacyWindow_BaseColor.png",::tex::gamma_srgb),float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local6 = (float3(Local5.x,Local5.y,Local5.z) * B);
	float Local7 = math::dot(Local6, float3(0.3,0.59,0.11));
	float3 Local8 = math::lerp(Local6,float3(Local7,Local7,Local7),Fraction);
	float3 Local9 = ::rotate_about_axis(float4(Local4.x,Local4.y,Local4.z,Local1),float3(0.0,0.0,0.0),Local8);
	float3 Local10 = (Local9 + Local8);
	float4 Local11 = tex::lookup_float4(texture_2d("./Textures/Pharmacy_Low_Tex_PharmacyWindow_OcclusionRoughnessMetallic.png",::tex::gamma_srgb),float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat);
	float Local12 = (Local11.y * B_1);

	float3 EmissiveColor_mdl = float3(0.0,0.0,0.0);
	float Opacity_mdl = Local5.w;
	float OpacityMask_mdl = (math::saturate(Local5.w) - 1.0f / 255.0f) < 0.0f ? 0.0f : 1.0f;
	float3 BaseColor_mdl = Local10;
	float Metallic_mdl = Local11.z;
	float Specular_mdl = 0.1;
	float Roughness_mdl = Local12;
	float2 Refraction_mdl = float2(float2(1.0,0.0).x,float2(1.0,0.0).x);

	} in
		::OmniUe4Translucent(
			base_color: BaseColor_mdl,
			metallic: Metallic_mdl,
			roughness: Roughness_mdl,
			specular: Specular_mdl,
			normal: Normal_mdl,
			opacity: Opacity_mdl,
			opacity_mask: OpacityMask_mdl,
			emissive_color: EmissiveColor_mdl,
			displacement: WorldPositionOffset_mdl,
			refraction: Refraction_mdl.x,
			two_sided: false);
