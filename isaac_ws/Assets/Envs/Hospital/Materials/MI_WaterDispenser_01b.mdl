mdl 1.3;

import ::math::*;
import ::state::*;
import ::tex::*;
import ::anno::*;
using .::OmniUe4Function import *;
using .::OmniUe4Base import *;

export annotation sampler_color();
export annotation sampler_normal();
export annotation sampler_grayscale();
export annotation sampler_alpha();
export annotation sampler_masks();
export annotation sampler_distancefield();
export annotation dither_masked_off();
export annotation world_space_normal();

export material MI_WaterDispenser_01b(
	uniform texture_2d CustomNormal = texture_2d("./Textures/TX_Fill_01_NRM.png",::tex::gamma_linear)
	[[sampler_normal()]],
	float GrungeTextureCoord = 1.0,
	float GrungeMultiply = 1.0,
	float EmissiveFresnelExp = 4.0,
	uniform texture_cube ReflectionCubemap = texture_cube("./Textures/Desert_Outer_HDR.dds",::tex::gamma_linear)
	[[sampler_color()]],
	float ReflectionBlur = 3.0,
	float Blur_PureReflectionBlend = 3.0,
	float FakeReflectionDesaturation = 0.5,
	float FakeReflectionAddedtoEmissive = 0.0,
	float EmissiveMulti = 0.1,
	float4 GlassColor = float4(0.88,0.901203,1.0,1.0),
	float RoughnessTextureCoord = 2.0,
	float RoughnessMultiply = 1.0,
	float4 FakeReflectionTInt = float4(1.0,1.0,1.0,0.0),
	float FakeReflectionBrightness = 0.2,
	float4 GrungeMulti = float4(1.0,0.782839,0.385064,1.0),
	float Reflectivity_Metalness = 1.0,
	float SpecularPower = 1.0,
	float Opacity = 0.5)
[[
	dither_masked_off()
]]
 = 
	let {
	float3 WorldPositionOffset_mdl = float3(0.0,0.0,0.0);
	float2 CustomizedUV0_mdl = float2(state::texture_coordinate(0).x,1.0-state::texture_coordinate(0).y);

	float4 Local0 = ::unpack_normal_map(tex::lookup_float4(CustomNormal,float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat));
	float2 Local1 = (CustomizedUV0_mdl * GrungeTextureCoord);
	float4 Local2 = tex::lookup_float4(texture_2d("./Textures/TX_Glass_01a_MASK.png",::tex::gamma_linear),float2(Local1.x,1.0-Local1.y),tex::wrap_repeat,tex::wrap_repeat);
	float Local3 = (Local2.x * GrungeMultiply);
	float3 Local4 = math::lerp(float3(Local0.x,Local0.y,Local0.z),float3(0.0,0.0,1.0),Local3);

	float3 Normal_mdl = Local4;

	float Local5 = ::fresnel(EmissiveFresnelExp, 0.04, ::pixel_normal_world_space());
	float4 Local6 = tex::lookup_float4(ReflectionCubemap,::reflection_vector());
	float Local7 = math::min(math::max(Blur_PureReflectionBlend,0.0),1.0);
	float3 Local8 = math::lerp(float3(Local6.x,Local6.y,Local6.z),float3(Local6.x,Local6.y,Local6.z),Local7);
	float Local9 = math::dot(Local8, float3(0.3,0.59,0.11));
	float Local10 = math::min(math::max(FakeReflectionDesaturation,0.0),1.0);
	float3 Local11 = math::lerp(Local8,float3(Local9,Local9,Local9),Local10);
	float3 Local12 = (Local11 * FakeReflectionAddedtoEmissive);
	float3 Local13 = (Local5 + Local12);
	float3 Local14 = (Local13 * EmissiveMulti);
	float3 Local15 = math::lerp(Local14,float3(0.0,0.0,0.0),Local3);
	float2 Local16 = (CustomizedUV0_mdl * RoughnessTextureCoord);
	float4 Local17 = tex::lookup_float4(texture_2d("./Textures/TX_Microdetail_01a_MASK.png",::tex::gamma_linear),float2(Local16.x,1.0-Local16.y),tex::wrap_repeat,tex::wrap_repeat);
	float Local18 = (Local17.y * RoughnessMultiply);
	float Local19 = math::min(math::max(Local18,0.0),1.0);
	float Local20 = (1.0 - Local19);
	float3 Local21 = (Local11 * float3(FakeReflectionTInt.x,FakeReflectionTInt.y,FakeReflectionTInt.z));
	float Local22 = math::min(math::max(FakeReflectionBrightness,0.0),1.0);
	float3 Local23 = (Local21 * Local22);
	float3 Local24 = (Local20 * Local23);
	float3 Local25 = (float3(GlassColor.x,GlassColor.y,GlassColor.z) + Local24);
	float3 Local26 = (Local2.x * float3(GrungeMulti.x,GrungeMulti.y,GrungeMulti.z));
	float3 Local27 = math::lerp(Local25,Local26,Local3);
	float Local28 = (Local20 * Reflectivity_Metalness);
	float3 Local29 = math::lerp(float3(Local28,Local28,Local28),float3(0.0,0.0,0.0),Local3);
	float Local30 = (SpecularPower * Local20);
	float3 Local31 = math::lerp(float3(Local30,Local30,Local30),float3(0.0,0.0,0.0),Local3);
	float3 Local32 = math::lerp(float3(Local18,Local18,Local18),float3(1.0,1.0,1.0),Local3);
	float Local33 = (Opacity + 0.2);
	float3 Local34 = ::transform_vector_from_tangent_to_world(float3(float3(Local0.x,Local0.y,Local0.z).x,float3(Local0.x,Local0.y,Local0.z).y,float3(Local0.x,Local0.y,Local0.z).z));
	float Local35 = ::fresnel(5.0, 0.04, Local34);
	float Local36 = math::lerp(Opacity,Local33,Local35);
	float Local37 = (0.0 + Local36);
	float Local38 = ::dither_temporalAA(Local37, 1.0);
	float3 Local39 = math::lerp(float3(Local38,Local38,Local38),float3(1.0,1.0,1.0),Local3);
	float3 Local40 = math::lerp(float3(1.0,1.0,1.0),float3(1.0,1.0,1.0),Local3);
	float3 Local41 = math::lerp(float3(0.0,0.0,0.0),float3(0.0,0.0,0.0),Local3);

	float3 EmissiveColor_mdl = Local15;
	float OpacityMask_mdl = (Local39.x - 0.3333) < 0.0f ? 0.0f : 1.0f;
	float3 BaseColor_mdl = Local27;
	float Metallic_mdl = Local29.x;
	float Specular_mdl = Local31.x;
	float Roughness_mdl = Local32.x;

	} in
		::OmniUe4Base(
			base_color: BaseColor_mdl,
			metallic: Metallic_mdl,
			roughness: Roughness_mdl,
			specular: Specular_mdl,
			normal: Normal_mdl,
			opacity: OpacityMask_mdl,
			emissive_color: EmissiveColor_mdl,
			displacement: WorldPositionOffset_mdl,
			two_sided: true);
