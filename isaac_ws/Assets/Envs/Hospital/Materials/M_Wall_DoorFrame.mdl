mdl 1.3;

import ::math::*;
import ::state::*;
import ::tex::*;
import ::anno::*;
using .::OmniUe4Function import *;
using .::OmniUe4Base import *;

export annotation sampler_color();
export annotation sampler_normal();
export annotation sampler_grayscale();
export annotation sampler_alpha();
export annotation sampler_masks();
export annotation sampler_distancefield();
export annotation dither_masked_off();
export annotation world_space_normal();

export material M_Wall_DoorFrame(
	float HueShiftPercentage_S_ = 0.0,
	float B = 1.0,
	float Fraction = 0.9,
	float B_1 = 1.0)
 = 
	let {
	float3 WorldPositionOffset_mdl = float3(0.0,0.0,0.0);
	float2 CustomizedUV0_mdl = float2(state::texture_coordinate(0).x,1.0-state::texture_coordinate(0).y);

	float4 Local0 = ::unpack_normal_map(tex::lookup_float4(texture_2d("./Textures/Tex_Wall_Plaster_normal.png",::tex::gamma_linear),float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat));

	float3 Normal_mdl = float3(Local0.x,Local0.y,Local0.z);

	float Local1 = (HueShiftPercentage_S_ * 6.283185);
	float Local2 = math::dot(float3(1.0,1.0,1.0), float3(1.0,1.0,1.0));
	float Local3 = math::sqrt(Local2);
	float3 Local4 = (float3(1.0,1.0,1.0) / Local3);
	float3 Local5 = (float3(0.379486,0.398027,0.40625) * B);
	float Local6 = math::dot(Local5, float3(0.3,0.59,0.11));
	float3 Local7 = math::lerp(Local5,float3(Local6,Local6,Local6),Fraction);
	float3 Local8 = ::rotate_about_axis(float4(Local4.x,Local4.y,Local4.z,Local1),float3(0.0,0.0,0.0),Local7);
	float3 Local9 = (Local8 + Local7);
	float4 Local10 = tex::lookup_float4(texture_2d("./Textures/Tex_Wall_Plaster_Merge_RAM.png",::tex::gamma_linear),float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat);
	float Local11 = (Local10.x * B_1);

	float3 EmissiveColor_mdl = float3(0.0,0.0,0.0);
	float OpacityMask_mdl = 1.0;
	float3 BaseColor_mdl = Local9;
	float Metallic_mdl = Local10.z;
	float Specular_mdl = 0.1;
	float Roughness_mdl = Local11;

	} in
		::OmniUe4Base(
			base_color: BaseColor_mdl,
			metallic: Metallic_mdl,
			roughness: Roughness_mdl,
			specular: Specular_mdl,
			normal: Normal_mdl,
			opacity: OpacityMask_mdl,
			emissive_color: EmissiveColor_mdl,
			displacement: WorldPositionOffset_mdl,
			two_sided: false);
