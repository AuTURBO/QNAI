mdl 1.3;

import ::math::*;
import ::state::*;
import ::tex::*;
import ::anno::*;
using .::OmniUe4Function import *;
using .::OmniUe4Base import *;

export annotation sampler_color();
export annotation sampler_normal();
export annotation sampler_grayscale();
export annotation sampler_alpha();
export annotation sampler_masks();
export annotation sampler_distancefield();
export annotation dither_masked_off();
export annotation world_space_normal();

export material MI_Hospital_Floor(
	uniform texture_2d Normal = texture_2d("./Textures/T_WhitePlastic_N.png",::tex::gamma_linear)
	[[sampler_normal()]],
	float TextureSize = 250.0,
	float TextureProjection_Contrast = 0.0,
	float Normal_Intensity = 1.0,
	uniform texture_2d Albedo = texture_2d("./Textures/T_WhitePlastic_D.png",::tex::gamma_srgb)
	[[sampler_color()]],
	float Albedo_Add = 0.0,
	float Albedo_Brightness = 1.0,
	float Albedo_Desaturate = 0.0,
	float Metallic = 0.0,
	float Specular = 0.5,
	uniform texture_2d Roughness = texture_2d("./Textures/T_WhitePlastic_R.png",::tex::gamma_linear)
	[[sampler_color()]],
	float Roughness_MapInfluence = 1.0,
	float Roughness_Amt = 1.0)
 = 
	let {
	float3 WorldPositionOffset_mdl = float3(0.0,0.0,0.0);

	float Local0 = math::abs(TextureSize);
	float Local1 = (Local0 * -1.0);
	float3 Local2 = ((state::transform_point(state::coordinate_internal,state::coordinate_world,state::position())*state::meters_per_scene_unit()*100.0) / Local1);
	float4 Local3 = ::unpack_normal_map(tex::lookup_float4(Normal,float2(float2(Local2.x,Local2.z).x,1.0-float2(Local2.x,Local2.z).y),tex::wrap_repeat,tex::wrap_repeat));
	float4 Local4 = ::unpack_normal_map(tex::lookup_float4(Normal,float2(float2(Local2.y,Local2.z).x,1.0-float2(Local2.y,Local2.z).y),tex::wrap_repeat,tex::wrap_repeat));
	float Local5 = (0.0 - TextureProjection_Contrast);
	float Local6 = (TextureProjection_Contrast + 1.0);
	float Local7 = math::abs(::vertex_normal_world_space().x);
	float Local8 = math::lerp(Local5,Local6,Local7);
	float Local9 = math::min(math::max(Local8,0.0),1.0);
	float3 Local10 = math::lerp(float3(Local3.x,Local3.y,Local3.z),float3(Local4.x,Local4.y,Local4.z),Local9);
	float4 Local11 = ::unpack_normal_map(tex::lookup_float4(Normal,float2(float2(Local2.x,Local2.y).x,1.0-float2(Local2.x,Local2.y).y),tex::wrap_repeat,tex::wrap_repeat));
	float Local12 = math::abs(::vertex_normal_world_space().z);
	float Local13 = math::lerp(Local5,Local6,Local12);
	float Local14 = math::min(math::max(Local13,0.0),1.0);
	float3 Local15 = math::lerp(Local10,float3(Local11.x,Local11.y,Local11.z),Local14);
	float Local16 = (Local15.x * Normal_Intensity);
	float Local17 = (Local15.y * Normal_Intensity);

	float3 Normal_mdl = float3(float2(Local16,Local17).x,float2(Local16,Local17).y,Local15.z);

	float4 Local18 = tex::lookup_float4(Albedo,float2(float2(Local2.x,Local2.z).x,1.0-float2(Local2.x,Local2.z).y),tex::wrap_repeat,tex::wrap_repeat);
	float4 Local19 = tex::lookup_float4(Albedo,float2(float2(Local2.y,Local2.z).x,1.0-float2(Local2.y,Local2.z).y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local20 = math::lerp(float3(Local18.x,Local18.y,Local18.z),float3(Local19.x,Local19.y,Local19.z),Local9);
	float4 Local21 = tex::lookup_float4(Albedo,float2(float2(Local2.x,Local2.y).x,1.0-float2(Local2.x,Local2.y).y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local22 = math::lerp(Local20,float3(Local21.x,Local21.y,Local21.z),Local14);
	float3 Local23 = (Local22 + Albedo_Add);
	float3 Local24 = (Local23 * Albedo_Brightness);
	float Local25 = math::dot(Local24, float3(0.3,0.59,0.11));
	float3 Local26 = math::lerp(Local24,float3(Local25,Local25,Local25),Albedo_Desaturate);
	float4 Local27 = tex::lookup_float4(Roughness,float2(float2(Local2.x,Local2.z).x,1.0-float2(Local2.x,Local2.z).y),tex::wrap_repeat,tex::wrap_repeat);
	float4 Local28 = tex::lookup_float4(Roughness,float2(float2(Local2.y,Local2.z).x,1.0-float2(Local2.y,Local2.z).y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local29 = math::lerp(float3(Local27.x,Local27.y,Local27.z),float3(Local28.x,Local28.y,Local28.z),Local9);
	float4 Local30 = tex::lookup_float4(Roughness,float2(float2(Local2.x,Local2.y).x,1.0-float2(Local2.x,Local2.y).y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local31 = math::lerp(Local29,float3(Local30.x,Local30.y,Local30.z),Local14);
	float3 Local32 = math::lerp(float3(0.5,0.5,0.5),Local31,Roughness_MapInfluence);
	float3 Local33 = (Local32 * Roughness_Amt);

	float3 EmissiveColor_mdl = float3(0.0,0.0,0.0);
	float OpacityMask_mdl = 1.0;
	float3 BaseColor_mdl = Local26;
	float Metallic_mdl = Metallic;
	float Specular_mdl = Specular;
	float Roughness_mdl = Local33.x;

	} in
		::OmniUe4Base(
			base_color: BaseColor_mdl,
			metallic: Metallic_mdl,
			roughness: Roughness_mdl,
			specular: Specular_mdl,
			normal: Normal_mdl,
			opacity: OpacityMask_mdl,
			emissive_color: EmissiveColor_mdl,
			displacement: WorldPositionOffset_mdl,
			two_sided: false);
