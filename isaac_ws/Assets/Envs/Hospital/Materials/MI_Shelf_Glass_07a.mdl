mdl 1.3;

import ::math::*;
import ::state::*;
import ::tex::*;
import ::anno::*;
using .::OmniUe4Function import *;
using .::OmniUe4Translucent import *;

export annotation sampler_color();
export annotation sampler_normal();
export annotation sampler_grayscale();
export annotation sampler_alpha();
export annotation sampler_masks();
export annotation sampler_distancefield();
export annotation dither_masked_off();
export annotation world_space_normal();

export material MI_Shelf_Glass_07a(
	float4 Normal = float4(0.0,0.0,1.0,1.0),
	float GrungeTextureCoord = 1.0,
	float GrungeMultiply = 1.0,
	float EmissiveFresnelExp = 4.0,
	uniform texture_cube ReflectionCubemap = texture_cube("./Textures/Desert_Outer_HDR.dds",::tex::gamma_linear)
	[[sampler_color()]],
	float ReflectionBlur = 3.0,
	float Blur_PureReflectionBlend = 3.0,
	float FakeReflectionDesaturation = 0.5,
	float FakeReflectionAddedtoEmissive = 0.0,
	float EmissiveMulti = 0.1,
	float4 GlassColor = float4(0.88,0.901203,1.0,1.0),
	float RoughnessTextureCoord = 2.0,
	float RoughnessMultiply = 1.0,
	float4 FakeReflectionTInt = float4(1.0,1.0,1.0,0.0),
	float FakeReflectionBrightness = 0.2,
	float4 GrungeMulti = float4(1.0,0.782839,0.385064,1.0),
	float Reflectivity_Metalness = 1.0,
	float SpecularPower = 1.0,
	float Opacity = 0.5)
 = 
	let {
	float3 WorldPositionOffset_mdl = float3(0.0,0.0,0.0);
	float2 CustomizedUV0_mdl = float2(state::texture_coordinate(0).x,1.0-state::texture_coordinate(0).y);

	float2 Local0 = (CustomizedUV0_mdl * GrungeTextureCoord);
	float4 Local1 = tex::lookup_float4(texture_2d("./Textures/TX_Glass_01a_MASK_21.png",::tex::gamma_linear),float2(Local0.x,1.0-Local0.y),tex::wrap_repeat,tex::wrap_repeat);
	float Local2 = (Local1.x * GrungeMultiply);
	float3 Local3 = math::lerp(float3(Normal.x,Normal.y,Normal.z),float3(0.0,0.0,1.0),Local2);

	float3 Normal_mdl = Local3;

	float Local4 = ::fresnel(EmissiveFresnelExp, 0.04, ::pixel_normal_world_space());
	float4 Local5 = tex::lookup_float4(ReflectionCubemap,::reflection_vector());
	float Local6 = math::min(math::max(Blur_PureReflectionBlend,0.0),1.0);
	float3 Local7 = math::lerp(float3(Local5.x,Local5.y,Local5.z),float3(Local5.x,Local5.y,Local5.z),Local6);
	float Local8 = math::dot(Local7, float3(0.3,0.59,0.11));
	float Local9 = math::min(math::max(FakeReflectionDesaturation,0.0),1.0);
	float3 Local10 = math::lerp(Local7,float3(Local8,Local8,Local8),Local9);
	float3 Local11 = (Local10 * FakeReflectionAddedtoEmissive);
	float3 Local12 = (Local4 + Local11);
	float3 Local13 = (Local12 * EmissiveMulti);
	float3 Local14 = math::lerp(Local13,float3(0.0,0.0,0.0),Local2);
	float2 Local15 = (CustomizedUV0_mdl * RoughnessTextureCoord);
	float4 Local16 = tex::lookup_float4(texture_2d("./Textures/TX_Microdetail_01a_MASK_22.png",::tex::gamma_linear),float2(Local15.x,1.0-Local15.y),tex::wrap_repeat,tex::wrap_repeat);
	float Local17 = (Local16.y * RoughnessMultiply);
	float Local18 = math::min(math::max(Local17,0.0),1.0);
	float Local19 = (1.0 - Local18);
	float3 Local20 = (Local10 * float3(FakeReflectionTInt.x,FakeReflectionTInt.y,FakeReflectionTInt.z));
	float Local21 = math::min(math::max(FakeReflectionBrightness,0.0),1.0);
	float3 Local22 = (Local20 * Local21);
	float3 Local23 = (Local19 * Local22);
	float3 Local24 = (float3(GlassColor.x,GlassColor.y,GlassColor.z) + Local23);
	float3 Local25 = (Local1.x * float3(GrungeMulti.x,GrungeMulti.y,GrungeMulti.z));
	float3 Local26 = math::lerp(Local24,Local25,Local2);
	float Local27 = (Local19 * Reflectivity_Metalness);
	float3 Local28 = math::lerp(float3(Local27,Local27,Local27),float3(0.0,0.0,0.0),Local2);
	float Local29 = (SpecularPower * Local19);
	float3 Local30 = math::lerp(float3(Local29,Local29,Local29),float3(0.0,0.0,0.0),Local2);
	float3 Local31 = math::lerp(float3(Local17,Local17,Local17),float3(1.0,1.0,1.0),Local2);
	float Local32 = (Opacity + 0.2);
	float3 Local33 = ::transform_vector_from_tangent_to_world(float3(float3(Normal.x,Normal.y,Normal.z).x,float3(Normal.x,Normal.y,Normal.z).y,float3(Normal.x,Normal.y,Normal.z).z));
	float Local34 = ::fresnel(5.0, 0.04, Local33);
	float Local35 = math::lerp(Opacity,Local32,Local34);
	float Local36 = (0.0 + Local35);
	float3 Local37 = math::lerp(float3(Local36,Local36,Local36),float3(1.0,1.0,1.0),Local2);
	float3 Local38 = math::lerp(float3(1.0,1.0,1.0),float3(1.0,1.0,1.0),Local2);

	float3 EmissiveColor_mdl = Local14;
	float Opacity_mdl = Local37.x;
	float OpacityMask_mdl = (math::saturate(Local37.x) - 1.0f / 255.0f) < 0.0f ? 0.0f : 1.0f;
	float3 BaseColor_mdl = Local26;
	float Metallic_mdl = Local28.x;
	float Specular_mdl = Local30.x;
	float Roughness_mdl = Local31.x;
	float2 Refraction_mdl = float2(1.0);

	} in
		::OmniUe4Translucent(
			base_color: BaseColor_mdl,
			metallic: Metallic_mdl,
			roughness: Roughness_mdl,
			specular: Specular_mdl,
			normal: Normal_mdl,
			opacity: Opacity_mdl,
			opacity_mask: OpacityMask_mdl,
			emissive_color: EmissiveColor_mdl,
			displacement: WorldPositionOffset_mdl,
			refraction: Refraction_mdl.x,
			two_sided: false);
